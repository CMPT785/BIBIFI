Build it - "Encrypted Secure File System"
The encrypted file system integrates with the host file system, functioning like a conventional file system while prioritizing enhanced security measures. Given the necessity to accommodate multiple clients/users, a unified storage approach is adopted to maximize resource utilization across all available storage space. This ensures an efficient and secure environment without the need for separate storage allocations for individual users.

Develop a C++ executable to serve as a middleware, enabling on-demand access to the encrypted secure file system. Users examining the file system on the host machine must not be able to extract any information about either the stored data or the associated user. The middleware acts as a protective barrier, ensuring confidentiality and preventing any unintended disclosure of sensitive details. Each group is expected to implement all the specified functional requirements outlined below.

Functional Requirements
Access the file system by executing the command below, which will initiate a shell and display a list of available commands for the user:

./fileserver keyfile_name

This should create a new directory called "filesystem" in the current directory (if it doesn't already exist) which will act as our encrypted filesystem. It should also create the admin_keyfile corresponding to the 'admin' user along with creating the filesystem. Public keyfiles can be stored in a dedicated public_keys keyfile directory outside of the filesystem at the same level as the binary.

Failed login: Print "Invalid keyfile" and exit.

Successful login: Print "Logged in as {username}" and provide a shell with the features specified below. The default current directory for the new shell will be "/", with personal and shared directories available for the current user.

Two types of users (one admin, N users)
User features:
`cd <directory>` -  The user will provide the directory to move to. It should accept `.` and `..` as current and parent directories respectively and support changing multiple directories at once (cd ../../dir1/dir2). cd / should take you to the current userâ€™s root directory. If a directory doesn't exist, the user should stay in the current directory.
`pwd` - Print the current working directory. Each user should have /personal and /shared base directories. 
`ls` -  List the files and directories in the current directory separated by a new line. You need to show the directories `.` and `..` as well. To differentiate between a file and a directory, the output should look as follows:
d -> .
d -> ..
d -> directory1
f -> file1
`cat <filename>` - Display the actual (decrypted) contents of the file. If the file doesn't exist, print "<filename> doesn't exist".
`share <filename> <username>` -  Share the file with the target user which should be contained within the `/shared` directory of the target user. The files are shared only with read permission. The shared directory and any subdirectories must be read-only. If the file doesn't exist, print "File <filename> doesn't exist". If the user doesn't exist, print "User <username> doesn't exist". The first check will be on the file.
`mkdir <directory_name>` - Create a new directory. If a directory with this name exists, print "Directory already exists".
`mkfile <filename> <contents>` - Create a new file with the contents. The contents will be printable ASCII characters. If a file with <filename> exists, it should replace the contents. If the file was previously shared, the target user should see the new contents of the file.
`exit` - Terminate the program.
Admin specific features:
Admin should have access to read the entire file system with all user features.
`adduser <username>`  - This command should create a keyfile called username_keyfile on the host which will be used by the user to access the filesystem. If a user with this name already exists, print "User <username> already exists".
Important Notes

All implementations must be in C++ 17.
You can use STL (C++ Standard template library) and nothing else.
If you believe you need to use an external library or code, you must get permission from the teaching team. You shouldn't be implementing any cryptography features and should identify and use the right libraries.
Keep the architecture simple without adding any moving parts. Complex systems tend to have unexpected issues.
Only the private keyfiles are secret (i.e. Alice will not have access to Bob's keyfile). Everything else is directly accessible to all clients. For simplicity, we will run it all locally and not use a distributed architecture. Any internal secrets you use are safe. Any more assumptions, you can run it by the teaching team.
Authentication should be done similarly to ssh key (public/private). For the users, each user should have their public keys stored under "public_keys" directory at the same level as the binary. Private keys are to be handled internally by the filesystem program.
The keyfile can have additional metadata too to be used by the fileserver (implementation-specific).
All output printed should end with a new line.
Users should not be able to create directories or files in the / and the /shared directory and the program should print "Forbidden" in such cases. There should only be two root directories for a user /personal and /shared.
Invalid commands should print "Invalid Command".
Thoroughly test your code and consider how edge cases can arise.
The development must be on a private GitHub repo. You're expected to follow weekly sprint meetings along with updating the status of the work completed during the week in a document. This will not be evaluated but will help other groups during the Break-it phase and also help with individual evaluation when an equal effort is not put in by the group members.
Also please add tayebim and aman143kri to your GitHub repos.

VERY IMPORTANT: Please make sure that your project builds and runs on the latest Ubuntu imageLinks to an external site. supported by lab computers. We recommend using a virtual machine.


Requesting permission to use external library/code
You must create a private piazza post visible only to instructors and TAs with a link to the code you want to use and the functionality you want to use it for. The usage must be limited only to the functionality it was requested for and to use any additional features, you must check with the teaching team again.

FAQs
We have attached an FAQ below with questions and answers from previous semesters for further clarification.

CMPT 785 BIBIFI FAQ.pdfDownload


TO DO:

- restrict admin account from modifying files (high priority)

- add OpenSSL (encryption) to all file/directory creations (low priority)

- full functionality testing required
